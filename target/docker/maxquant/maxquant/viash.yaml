functionality:
  name: "maxquant"
  namespace: "maxquant"
  version: "main_build"
  authors:
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  inputs:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "One or more Thermo Raw files."
    example:
    - "input.raw"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: true
    multiple_sep: ":"
  - type: "file"
    name: "--reference"
    alternatives: []
    description: "A reference file in fasta format."
    example:
    - "reference.fasta"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: true
    multiple_sep: ":"
  outputs:
  - type: "file"
    name: "--output"
    alternatives: []
    description: "An output directory to store the 'mqpar.xml' and 'combined' outputs."
    example:
    - "output_dir"
    default: []
    must_exist: false
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ":"
  arguments:
  - type: "string"
    name: "--ref_taxonomy_id"
    alternatives: []
    description: "Taxonomy ID. Length must match --reference parameter. \nCommon taxonomy\
      \ IDs are Homo Sapiens: 9606, Mus Musculus: 10090.\n"
    example:
    - "9606"
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: true
    multiple_sep: ":"
  - type: "boolean"
    name: "--match_between_runs"
    alternatives: []
    description: "Identifications are transferred to non-sequenced or non-identified\
      \ MS features in other LC-MS runs."
    example: []
    default:
    - false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--write_tables"
    alternatives: []
    description: "Which tables to write out."
    example: []
    default:
    - "msScans"
    - "msmsScans"
    - "ms3Scans"
    - "allPeptides"
    - "mzRange"
    - "mzTab"
    - "DIA fragments"
    - "DIA fragments quant"
    - "pasefMsmsScans"
    - "accumulatedMsmsScans"
    required: false
    choices:
    - "msScans"
    - "msmsScans"
    - "ms3Scans"
    - "allPeptides"
    - "mzRange"
    - "mzTab"
    - "DIA fragments"
    - "DIA fragments quant"
    - "pasefMsmsScans"
    - "accumulatedMsmsScans"
    direction: "input"
    multiple: true
    multiple_sep: ":"
  - type: "string"
    name: "--ms_instrument"
    alternatives: []
    description: "Type of intrument the data was generated on. Some internal parameters,\
      \ e.g. in peak detection are set to optimal values based on the machine type.\
      \ Currently Thermo Fisher Orbitrap and FT like instruments are supported, as\
      \ well as ToF instruments like Bruker Impact HD and AB Sciex TripleTOF 5600.\
      \ Usually there is no need for the user to adjust the sub-parameters."
    example: []
    default:
    - "Bruker TIMS"
    required: false
    choices:
    - "Orbitrap"
    - "Bruker Q-TOF"
    - "Sciex Q-TOF"
    - "Agilent Q-TOF"
    - "Bruker TIMS"
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--lcms_run_type"
    alternatives: []
    description: "The type of LC-MS run. Select 'Standard' for label free and MS1\
      \ labeled samples. For conventional isobaric labeling samples, select 'Reporter\
      \ ion MS2'. In case the isobaric labeling reporters should be read from MS3\
      \ spectra, please select 'Reporter ion MS3'."
    example: []
    default:
    - "Standard"
    required: true
    choices:
    - "Standard"
    - "Reporter ion MS2"
    - "Reporter ion MS3"
    - "NeuCode"
    - "BoxCar"
    - "TIMS-DDA"
    - "MaxDIA"
    - "TIMS MaxDIA"
    - "BoxCar MaxDIA"
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--lfq_mode"
    alternatives: []
    description: "Apply the algorithm for label free protein quantification. The use\
      \ of an experimental design so specify which LC-MS runs or groups of LC-MS runs\
      \ correspond to the different samples is obligatory here. The output of the\
      \ label free algorithm can be found in the proteinGroups table in the columns\
      \ starting with 'LFQ Intensity'."
    example: []
    default:
    - "LFQ"
    required: false
    choices:
    - "None"
    - "LFQ"
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--num_cores"
    alternatives: []
    description: ""
    example:
    - 30
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "boolean_true"
    name: "--dryrun"
    alternatives: []
    description: "If true, will only generate the mqpar.xml file and not run MaxQuant."
    direction: "input"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # maxquant main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.14 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      # 
      # Component authors:
      #  * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid:
      # 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="maxquant"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "maxquant main_build"
        echo ""
        echo "Perform a MaxQuant analysis with mostly default parameters."
        echo ""
        echo "Usage:"
        echo "maxquant --input file1.raw --input file2.raw --reference ref.fasta --output out/"
        echo ""
        echo "Inputs:"
        echo "    --input"
        echo "        type: file, required parameter, multiple values allowed"
        echo "        example: input.raw"
        echo "        One or more Thermo Raw files."
        echo ""
        echo "    --reference"
        echo "        type: file, required parameter, multiple values allowed"
        echo "        example: reference.fasta"
        echo "        A reference file in fasta format."
        echo ""
        echo "Outputs:"
        echo "    --output"
        echo "        type: file, required parameter, output"
        echo "        example: output_dir"
        echo "        An output directory to store the 'mqpar.xml' and 'combined' outputs."
        echo ""
        echo "Arguments:"
        echo "    --ref_taxonomy_id"
        echo "        type: string, multiple values allowed"
        echo "        example: 9606"
        echo "        Taxonomy ID. Length must match --reference parameter."
        echo "        Common taxonomy IDs are Homo Sapiens: 9606, Mus Musculus: 10090."
        echo ""
        echo "    --match_between_runs"
        echo "        type: boolean"
        echo "        default: false"
        echo "        Identifications are transferred to non-sequenced or non-identified MS"
        echo "        features in other LC-MS runs."
        echo ""
        echo "    --write_tables"
        echo "        type: string, multiple values allowed"
        echo "        default: msScans:msmsScans:ms3Scans:allPeptides:mzRange:mzTab:DIA"
        echo "fragments:DIA fragments quant:pasefMsmsScans:accumulatedMsmsScans"
        echo "        choices: [ msScans, msmsScans, ms3Scans, allPeptides, mzRange, mzTab,"
        echo "DIA fragments, DIA fragments quant, pasefMsmsScans, accumulatedMsmsScans ]"
        echo "        Which tables to write out."
        echo ""
        echo "    --ms_instrument"
        echo "        type: string"
        echo "        default: Bruker TIMS"
        echo "        choices: [ Orbitrap, Bruker Q-TOF, Sciex Q-TOF, Agilent Q-TOF, Bruker"
        echo "TIMS ]"
        echo "        Type of intrument the data was generated on. Some internal parameters,"
        echo "        e.g. in peak detection are set to optimal values based on the machine"
        echo "        type. Currently Thermo Fisher Orbitrap and FT like instruments are"
        echo "        supported, as well as ToF instruments like Bruker Impact HD and AB Sciex"
        echo "        TripleTOF 5600. Usually there is no need for the user to adjust the"
        echo "        sub-parameters."
        echo ""
        echo "    --lcms_run_type"
        echo "        type: string, required parameter"
        echo "        default: Standard"
        echo "        choices: [ Standard, Reporter ion MS2, Reporter ion MS3, NeuCode,"
        echo "BoxCar, TIMS-DDA, MaxDIA, TIMS MaxDIA, BoxCar MaxDIA ]"
        echo "        The type of LC-MS run. Select 'Standard' for label free and MS1 labeled"
        echo "        samples. For conventional isobaric labeling samples, select 'Reporter"
        echo "        ion MS2'. In case the isobaric labeling reporters should be read from"
        echo "        MS3 spectra, please select 'Reporter ion MS3'."
        echo ""
        echo "    --lfq_mode"
        echo "        type: string"
        echo "        default: LFQ"
        echo "        choices: [ None, LFQ ]"
        echo "        Apply the algorithm for label free protein quantification. The use of an"
        echo "        experimental design so specify which LC-MS runs or groups of LC-MS runs"
        echo "        correspond to the different samples is obligatory here. The output of"
        echo "        the label free algorithm can be found in the proteinGroups table in the"
        echo "        columns starting with 'LFQ Intensity'."
        echo ""
        echo "    --num_cores"
        echo "        type: integer"
        echo "        example: 30"
        echo ""
        echo "    --dryrun"
        echo "        type: boolean_true"
        echo "        If true, will only generate the mqpar.xml file and not run MaxQuant."
      }
      ######## Helper functions for setting up Docker images for viash ########
      # expects: ViashDockerBuild
      
      # ViashDockerInstallationCheck: check whether Docker is installed correctly
      #
      # examples:
      #   ViashDockerInstallationCheck
      function ViashDockerInstallationCheck {
        ViashDebug "Checking whether Docker is installed"
        if [ ! command -v docker &> /dev/null ]; then
          ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
          exit 1
        fi
      
        ViashDebug "Checking whether the Docker daemon is running"
        save=$-; set +e
        docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
          ViashCritical "- Try running 'dockerd' in the command line"
          ViashCritical "- See https://docs.docker.com/config/daemon/"
          exit 1
        fi
      }
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Checking if Docker image is available at '$1'"
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker pull $1 && return 0 || return 1
        else
          save=$-; set +e
          docker pull $1 2> /dev/null > /dev/null
          out=$?
          [[ $save =~ e ]] && set -e
          if [ $out -ne 0 ]; then
            ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
          fi
          return $out
        fi
      }
      
      # ViashDockerPush: push a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPush python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPush sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPush {
        ViashNotice "Pushing image to '$1'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker push $1
          out=$?
        else
          docker push $1 2> /dev/null > /dev/null
          out=$?
        fi
        [[ $save =~ e ]] && set -e
        if [ $out -eq 0 ]; then
          ViashNotice "Container '$VSHD_ID' push succeeded."
        else
          ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
        fi
        return $out
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        save=$-; set +e
        ViashDockerPull $1
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          save=$-; set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          ViashDockerPush "$VSHD_ID"
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          save=$-; set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            ViashDockerPush "$VSHD_ID"
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM python:3.10
      
      RUN apt-get update && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y wget unzip apt-transport-https && \
        rm -rf /var/lib/apt/lists/*
      
      RUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb
      RUN apt-get update && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y dotnet-sdk-2.1 aspnetcore-runtime-2.1 dotnet-sdk-3.1 aspnetcore-runtime-3.1 && \
        rm -rf /var/lib/apt/lists/*
      
      RUN mkdir /maxquant && cd /maxquant && wget -q https://www.dropbox.com/s/6aijsx0v3zvkfqu/MaxQuant_2.0.3.1.zip -O MaxQuant_2.0.3.1.zip && unzip MaxQuant_2.0.3.1.zip && rm MaxQuant_2.0.3.1.zip && cd $(find /maxquant/* -type d -maxdepth 1) && mv * /maxquant
      RUN pip install --upgrade pip && \
        pip install --upgrade --no-cache-dir "pandas"
      
      LABEL org.opencontainers.image.authors="Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}"
      LABEL org.opencontainers.image.description="Companion container for running component maxquant maxquant"
      LABEL org.opencontainers.image.created="2022-07-13T11:57:42Z"
      LABEL org.opencontainers.image.source="https://github.com/czbiohub/mspipelines"
      LABEL org.opencontainers.image.revision="a68b3868305a8730cd026f01c44a914c2994f493"
      LABEL org.opencontainers.image.version="main_build"
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-maxquant-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_META_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Building container '$1' with Dockerfile"
        ViashInfo "Running 'docker build -t $@ $tmpdir'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashError "Error occurred while building container '$1'"
          if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "maxquant main_build"
                  exit
                  ;;
              --input)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              --reference)
                  if [ -z "$VIASH_PAR_REFERENCE" ]; then
                    VIASH_PAR_REFERENCE="$2"
                  else
                    VIASH_PAR_REFERENCE="$VIASH_PAR_REFERENCE:""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --reference=*)
                  if [ -z "$VIASH_PAR_REFERENCE" ]; then
                    VIASH_PAR_REFERENCE=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_REFERENCE="$VIASH_PAR_REFERENCE:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --ref_taxonomy_id)
                  if [ -z "$VIASH_PAR_REF_TAXONOMY_ID" ]; then
                    VIASH_PAR_REF_TAXONOMY_ID="$2"
                  else
                    VIASH_PAR_REF_TAXONOMY_ID="$VIASH_PAR_REF_TAXONOMY_ID:""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --ref_taxonomy_id. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --ref_taxonomy_id=*)
                  if [ -z "$VIASH_PAR_REF_TAXONOMY_ID" ]; then
                    VIASH_PAR_REF_TAXONOMY_ID=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_REF_TAXONOMY_ID="$VIASH_PAR_REF_TAXONOMY_ID:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              --match_between_runs)
                  VIASH_PAR_MATCH_BETWEEN_RUNS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --match_between_runs. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --match_between_runs=*)
                  VIASH_PAR_MATCH_BETWEEN_RUNS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --write_tables)
                  if [ -z "$VIASH_PAR_WRITE_TABLES" ]; then
                    VIASH_PAR_WRITE_TABLES="$2"
                  else
                    VIASH_PAR_WRITE_TABLES="$VIASH_PAR_WRITE_TABLES:""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --write_tables. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --write_tables=*)
                  if [ -z "$VIASH_PAR_WRITE_TABLES" ]; then
                    VIASH_PAR_WRITE_TABLES=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_WRITE_TABLES="$VIASH_PAR_WRITE_TABLES:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              --ms_instrument)
                  VIASH_PAR_MS_INSTRUMENT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --ms_instrument. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --ms_instrument=*)
                  VIASH_PAR_MS_INSTRUMENT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --lcms_run_type)
                  VIASH_PAR_LCMS_RUN_TYPE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --lcms_run_type. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --lcms_run_type=*)
                  VIASH_PAR_LCMS_RUN_TYPE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --lfq_mode)
                  VIASH_PAR_LFQ_MODE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --lfq_mode. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --lfq_mode=*)
                  VIASH_PAR_LFQ_MODE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --num_cores)
                  VIASH_PAR_NUM_CORES="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --num_cores. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --num_cores=*)
                  VIASH_PAR_NUM_CORES=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --dryrun)
                  VIASH_PAR_DRYRUN=true
                  shift 1
                  ;;
              ---setup)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$2"
                  shift 1
                  ;;
              ---setup=*)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
                  shift 2
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  VIASH_MODE='docker_debug'
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      ViashDockerInstallationCheck
      if [ $VIASH_MODE == "docker_setup" ]; then
        ViashDockerSetup 'ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build' "$VIASH_DOCKER_SETUP_STRATEGY"
        exit 0
      fi
      ViashDockerSetup 'ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build' ifneedbepullelsecachedbuild
      if [ $VIASH_MODE == "docker_debug" ]; then
        ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build'"
        docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build'
        exit 0
      fi
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_REFERENCE" ]; then
        ViashError '--reference' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_LCMS_RUN_TYPE" ]; then
        ViashError '--lcms_run_type' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_MATCH_BETWEEN_RUNS" ]; then
        VIASH_PAR_MATCH_BETWEEN_RUNS="false"
      fi
      if [ -z "$VIASH_PAR_WRITE_TABLES" ]; then
        VIASH_PAR_WRITE_TABLES="msScans:msmsScans:ms3Scans:allPeptides:mzRange:mzTab:DIA fragments:DIA fragments quant:pasefMsmsScans:accumulatedMsmsScans"
      fi
      if [ -z "$VIASH_PAR_MS_INSTRUMENT" ]; then
        VIASH_PAR_MS_INSTRUMENT="Bruker TIMS"
      fi
      if [ -z "$VIASH_PAR_LFQ_MODE" ]; then
        VIASH_PAR_LFQ_MODE="LFQ"
      fi
      if [ -z "$VIASH_PAR_DRYRUN" ]; then
        VIASH_PAR_DRYRUN="false"
      fi
      
      
      # check whether parameters values are of the right type
      
      
      
      
      if [[ -n "$VIASH_PAR_MATCH_BETWEEN_RUNS" ]]; then
        if ! [[ "$VIASH_PAR_MATCH_BETWEEN_RUNS" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
          ViashError '--match_between_runs' has to be a boolean. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      
      
      
      
      if [[ -n "$VIASH_PAR_NUM_CORES" ]]; then
        if ! [[ "$VIASH_PAR_NUM_CORES" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--num_cores' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_DRYRUN" ]]; then
        if ! [[ "$VIASH_PAR_DRYRUN" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
          ViashError '--dryrun' has to be a boolean_true. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      if [ ! -z "$VIASH_PAR_WRITE_TABLES" ]; then
        VIASH_PAR_WRITE_TABLES_CHOICES=("msScans:msmsScans:ms3Scans:allPeptides:mzRange:mzTab:DIA fragments:DIA fragments quant:pasefMsmsScans:accumulatedMsmsScans")
        IFS=:
        set -f
        for val in $VIASH_PAR_WRITE_TABLES; do
          if ! [[ ":${VIASH_PAR_WRITE_TABLES_CHOICES[*]}:" =~ ":${val}:" ]]; then
            ViashError '--write_tables' specified value of \'${val}\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
            exit 1
          fi
        done
        set +f
        unset IFS
      fi
      
      if [ ! -z "$VIASH_PAR_MS_INSTRUMENT" ]; then
        VIASH_PAR_MS_INSTRUMENT_CHOICES=("Orbitrap:Bruker Q-TOF:Sciex Q-TOF:Agilent Q-TOF:Bruker TIMS")
        IFS=:
        set -f
        if ! [[ ":${VIASH_PAR_MS_INSTRUMENT_CHOICES[*]}:" =~ ":$VIASH_PAR_MS_INSTRUMENT:" ]]; then
          ViashError '--ms_instrument' specified value of \'$VIASH_PAR_MS_INSTRUMENT\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
          exit 1
        fi
        set +f
        unset IFS
      fi
      
      if [ ! -z "$VIASH_PAR_LCMS_RUN_TYPE" ]; then
        VIASH_PAR_LCMS_RUN_TYPE_CHOICES=("Standard:Reporter ion MS2:Reporter ion MS3:NeuCode:BoxCar:TIMS-DDA:MaxDIA:TIMS MaxDIA:BoxCar MaxDIA")
        IFS=:
        set -f
        if ! [[ ":${VIASH_PAR_LCMS_RUN_TYPE_CHOICES[*]}:" =~ ":$VIASH_PAR_LCMS_RUN_TYPE:" ]]; then
          ViashError '--lcms_run_type' specified value of \'$VIASH_PAR_LCMS_RUN_TYPE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
          exit 1
        fi
        set +f
        unset IFS
      fi
      
      if [ ! -z "$VIASH_PAR_LFQ_MODE" ]; then
        VIASH_PAR_LFQ_MODE_CHOICES=("None:LFQ")
        IFS=:
        set -f
        if ! [[ ":${VIASH_PAR_LFQ_MODE_CHOICES[*]}:" =~ ":$VIASH_PAR_LFQ_MODE:" ]]; then
          ViashError '--lfq_mode' specified value of \'$VIASH_PAR_LFQ_MODE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
          exit 1
        fi
        set +f
        unset IFS
      fi
      
      
      
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT" ]; then
        IFS=":"
        for var in $VIASH_PAR_INPUT; do
          unset IFS
          VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
          if [ -z "$VIASH_TEST_INPUT" ]; then
            VIASH_TEST_INPUT="$(ViashAutodetectMount "$var")"
          else
            VIASH_TEST_INPUT="$VIASH_TEST_INPUT:""$(ViashAutodetectMount "$var")"
          fi
        done
        VIASH_PAR_INPUT="$VIASH_TEST_INPUT"
      fi
      if [ ! -z "$VIASH_PAR_REFERENCE" ]; then
        IFS=":"
        for var in $VIASH_PAR_REFERENCE; do
          unset IFS
          VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
          if [ -z "$VIASH_TEST_REFERENCE" ]; then
            VIASH_TEST_REFERENCE="$(ViashAutodetectMount "$var")"
          else
            VIASH_TEST_REFERENCE="$VIASH_TEST_REFERENCE:""$(ViashAutodetectMount "$var")"
          fi
        done
        VIASH_PAR_REFERENCE="$VIASH_TEST_REFERENCE"
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")"
      VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
      VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      # change file ownership
      function ViashPerformChown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
        fi
      }
      trap ViashPerformChown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-maxquant-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      import os
      import re
      import subprocess
      import tempfile
      import shutil
      import pandas as pd
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'.split(':')"; else echo None; fi ),
        'reference': $( if [ ! -z ${VIASH_PAR_REFERENCE+x} ]; then echo "'${VIASH_PAR_REFERENCE//\'/\\\'}'.split(':')"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
        'ref_taxonomy_id': $( if [ ! -z ${VIASH_PAR_REF_TAXONOMY_ID+x} ]; then echo "'${VIASH_PAR_REF_TAXONOMY_ID//\'/\\\'}'.split(':')"; else echo None; fi ),
        'match_between_runs': $( if [ ! -z ${VIASH_PAR_MATCH_BETWEEN_RUNS+x} ]; then echo "'${VIASH_PAR_MATCH_BETWEEN_RUNS//\'/\\\'}'.lower() == 'true'"; else echo None; fi ),
        'write_tables': $( if [ ! -z ${VIASH_PAR_WRITE_TABLES+x} ]; then echo "'${VIASH_PAR_WRITE_TABLES//\'/\\\'}'.split(':')"; else echo None; fi ),
        'ms_instrument': $( if [ ! -z ${VIASH_PAR_MS_INSTRUMENT+x} ]; then echo "'${VIASH_PAR_MS_INSTRUMENT//\'/\\\'}'"; else echo None; fi ),
        'lcms_run_type': $( if [ ! -z ${VIASH_PAR_LCMS_RUN_TYPE+x} ]; then echo "'${VIASH_PAR_LCMS_RUN_TYPE//\'/\\\'}'"; else echo None; fi ),
        'lfq_mode': $( if [ ! -z ${VIASH_PAR_LFQ_MODE+x} ]; then echo "'${VIASH_PAR_LFQ_MODE//\'/\\\'}'"; else echo None; fi ),
        'num_cores': $( if [ ! -z ${VIASH_PAR_NUM_CORES+x} ]; then echo "int('${VIASH_PAR_NUM_CORES//\'/\\\'}')"; else echo None; fi ),
        'dryrun': $( if [ ! -z ${VIASH_PAR_DRYRUN+x} ]; then echo "'${VIASH_PAR_DRYRUN//\'/\\\'}'.lower() == 'true'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'executable': '$VIASH_META_EXECUTABLE',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ## VIASH END
      
      # if par_input is a directory, look for raw files
      if len(par["input"]) == 1 and os.path.isdir(par["input"][0]):
         par["input"] = [ os.path.join(dp, f) for dp, dn, filenames in os.walk(par["input"]) for f in filenames if re.match(r'.*\\.raw', f) ]
      
      # set taxonomy id to empty string if not specified
      if not par["ref_taxonomy_id"]:
         par["ref_taxonomy_id"] = [ "" for ref in par["reference"] ]
      
      # use absolute paths
      par["input"] = [ os.path.abspath(f) for f in par["input"] ]
      par["reference"] = [ os.path.abspath(f) for f in par["reference"] ]
      par["output"] = os.path.abspath(par["output"])
      
      # auto set experiment names
      experiment_names = [ re.sub(r"_\\d+\$", "", os.path.basename(file)) for file in par["input"] ]
      
      # load default matching settings
      match_between_runs_settings = pd.read_table(
         meta["resources_dir"] + "/settings/match_between_runs.tsv",
         sep="\\t",
         index_col="id",
         dtype=str,
         keep_default_na=False,
         na_values=['_']
      )
      
      # load default instrument settings
      ms_instrument_settings = pd.read_table(
         meta["resources_dir"] + "/settings/ms_instrument.tsv",
         sep="\\t",
         index_col="id",
         dtype=str,
         keep_default_na=False,
         na_values=['_']
      )
      
      # load default group type settings
      group_type_settings = pd.read_table(
         meta["resources_dir"] + "/settings/group_type.tsv",
         sep="\\t",
         index_col="id",
         dtype=str,
         keep_default_na=False,
         na_values=['_']
      )
      
      # check reference metadata
      
      assert len(par["reference"]) == len(par["ref_taxonomy_id"]), "--ref_taxonomy_id must have same length as --reference"
      
      # copy input files to tempdir
      with tempfile.TemporaryDirectory() as temp_dir:
         # prepare to copy input files to tempdir
         old_inputs = par["input"]
         new_inputs = [ os.path.join(temp_dir, os.path.basename(f)) for f in old_inputs ]
         par["input"] = new_inputs
      
         # create output dir if not exists
         if not os.path.exists(par["output"]):
            os.makedirs(par["output"])
      
         # Create params file
         param_file = os.path.join(par["output"], "mqpar.xml")
         endl = "\\n"
         param_content = f"""<?xml version="1.0" encoding="utf-8"?>
      <MaxQuantParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
         <fastaFiles>"""
      
         # TODO: make taxonomy optional
         for path, taxid in zip(par["reference"], par["ref_taxonomy_id"]):
            param_content += f"""
            <FastaFileInfo>
               <fastaFilePath>{path}</fastaFilePath>
               <identifierParseRule>>.*\\|(.*)\\|</identifierParseRule>
               <descriptionParseRule>>(.*)</descriptionParseRule>
               <taxonomyParseRule></taxonomyParseRule>
               <variationParseRule></variationParseRule>
               <modificationParseRule></modificationParseRule>
               <taxonomyId>{taxid}</taxonomyId>
            </FastaFileInfo>"""
      
         param_content += f"""
         </fastaFiles>
         <fastaFilesProteogenomics>
         </fastaFilesProteogenomics>
         <fastaFilesFirstSearch>
         </fastaFilesFirstSearch>
         <fixedSearchFolder></fixedSearchFolder>
         <andromedaCacheSize>350000</andromedaCacheSize>
         <advancedRatios>True</advancedRatios>
         <pvalThres>0.005</pvalThres>
         <rtShift>False</rtShift>
         <separateLfq>False</separateLfq>
         <lfqStabilizeLargeRatios>True</lfqStabilizeLargeRatios>
         <lfqRequireMsms>True</lfqRequireMsms>
         <lfqBayesQuant>False</lfqBayesQuant>
         <decoyMode>revert</decoyMode>
         <boxCarMode>all</boxCarMode>
         <includeContaminants>True</includeContaminants>
         <maxPeptideMass>4600</maxPeptideMass>
         <epsilonMutationScore>True</epsilonMutationScore>
         <mutatedPeptidesSeparately>True</mutatedPeptidesSeparately>
         <proteogenomicPeptidesSeparately>True</proteogenomicPeptidesSeparately>
         <minDeltaScoreUnmodifiedPeptides>0</minDeltaScoreUnmodifiedPeptides>
         <minDeltaScoreModifiedPeptides>6</minDeltaScoreModifiedPeptides>
         <minScoreUnmodifiedPeptides>0</minScoreUnmodifiedPeptides>
         <minScoreModifiedPeptides>40</minScoreModifiedPeptides>
         <secondPeptide>True</secondPeptide>
         <matchBetweenRuns>{par["match_between_runs"]}</matchBetweenRuns>
         <matchUnidentifiedFeatures>False</matchUnidentifiedFeatures>
         <matchBetweenRunsFdr>False</matchBetweenRunsFdr>
         <dependentPeptides>False</dependentPeptides>
         <dependentPeptideFdr>0</dependentPeptideFdr>
         <dependentPeptideMassBin>0</dependentPeptideMassBin>
         <dependentPeptidesBetweenRuns>False</dependentPeptidesBetweenRuns>
         <dependentPeptidesWithinExperiment>False</dependentPeptidesWithinExperiment>
         <dependentPeptidesWithinParameterGroup>False</dependentPeptidesWithinParameterGroup>
         <dependentPeptidesRestrictFractions>False</dependentPeptidesRestrictFractions>
         <dependentPeptidesFractionDifference>0</dependentPeptidesFractionDifference>
         <ibaq>False</ibaq>
         <top3>False</top3>
         <independentEnzymes>False</independentEnzymes>
         <useDeltaScore>False</useDeltaScore>
         <splitProteinGroupsByTaxonomy>False</splitProteinGroupsByTaxonomy>
         <taxonomyLevel>Species</taxonomyLevel>
         <avalon>False</avalon>
         <nModColumns>3</nModColumns>
         <ibaqLogFit>False</ibaqLogFit>
         <ibaqChargeNormalization>False</ibaqChargeNormalization>
         <razorProteinFdr>True</razorProteinFdr>
         <deNovoSequencing>False</deNovoSequencing>
         <deNovoVarMods>False</deNovoVarMods>
         <deNovoCompleteSequence>False</deNovoCompleteSequence>
         <deNovoCalibratedMasses>False</deNovoCalibratedMasses>
         <deNovoMaxIterations>0</deNovoMaxIterations>
         <deNovoProteaseReward>0</deNovoProteaseReward>
         <deNovoProteaseRewardTof>0</deNovoProteaseRewardTof>
         <deNovoAgPenalty>0</deNovoAgPenalty>
         <deNovoGgPenalty>0</deNovoGgPenalty>
         <deNovoUseComplementScore>True</deNovoUseComplementScore>
         <deNovoUseProteaseScore>True</deNovoUseProteaseScore>
         <deNovoUseWaterLossScore>True</deNovoUseWaterLossScore>
         <deNovoUseAmmoniaLossScore>True</deNovoUseAmmoniaLossScore>
         <deNovoUseA2Score>True</deNovoUseA2Score>
         <massDifferenceSearch>False</massDifferenceSearch>
         <isotopeCalc>False</isotopeCalc>
         <writePeptidesForSpectrumFile></writePeptidesForSpectrumFile>
         <intensityPredictionsFile>
         </intensityPredictionsFile>
         <minPepLen>7</minPepLen>
         <psmFdrCrosslink>0.01</psmFdrCrosslink>
         <peptideFdr>0.01</peptideFdr>
         <proteinFdr>0.01</proteinFdr>
         <siteFdr>0.01</siteFdr>
         <minPeptideLengthForUnspecificSearch>8</minPeptideLengthForUnspecificSearch>
         <maxPeptideLengthForUnspecificSearch>25</maxPeptideLengthForUnspecificSearch>
         <useNormRatiosForOccupancy>True</useNormRatiosForOccupancy>
         <minPeptides>1</minPeptides>
         <minRazorPeptides>1</minRazorPeptides>
         <minUniquePeptides>0</minUniquePeptides>
         <useCounterparts>False</useCounterparts>
         <advancedSiteIntensities>True</advancedSiteIntensities>
         <customProteinQuantification>False</customProteinQuantification>
         <customProteinQuantificationFile></customProteinQuantificationFile>
         <minRatioCount>2</minRatioCount>
         <restrictProteinQuantification>True</restrictProteinQuantification>
         <restrictMods>
            <string>Oxidation (M)</string>
            <string>Acetyl (Protein N-term)</string>
         </restrictMods>
         <matchingTimeWindow>{match_between_runs_settings.at[par["match_between_runs"], "matchingTimeWindow"]}</matchingTimeWindow>
         <matchingIonMobilityWindow>{match_between_runs_settings.at[par["match_between_runs"], "matchingIonMobilityWindow"]}</matchingIonMobilityWindow>
         <alignmentTimeWindow>{match_between_runs_settings.at[par["match_between_runs"], "alignmentTimeWindow"]}</alignmentTimeWindow>
         <alignmentIonMobilityWindow>{match_between_runs_settings.at[par["match_between_runs"], "alignmentIonMobilityWindow"]}</alignmentIonMobilityWindow>
         <numberOfCandidatesMsms>15</numberOfCandidatesMsms>
         <compositionPrediction>0</compositionPrediction>
         <quantMode>1</quantMode>
         <massDifferenceMods>
         </massDifferenceMods>
         <mainSearchMaxCombinations>200</mainSearchMaxCombinations>
         <writeMsScansTable>{"msScans" in par["write_tables"]}</writeMsScansTable>
         <writeMsmsScansTable>{"msmsScans" in par["write_tables"]}</writeMsmsScansTable>
         <writePasefMsmsScansTable>{"pasefMsmsScans" in par["write_tables"]}</writePasefMsmsScansTable>
         <writeAccumulatedMsmsScansTable>{"accumulatedMsmsScans" in par["write_tables"]}</writeAccumulatedMsmsScansTable>
         <writeMs3ScansTable>{"ms3Scans" in par["write_tables"]}</writeMs3ScansTable>
         <writeAllPeptidesTable>{"allPeptides" in par["write_tables"]}</writeAllPeptidesTable>
         <writeMzRangeTable>{"mzRange" in par["write_tables"]}</writeMzRangeTable>
         <writeDiaFragmentTable>{"DIA fragments" in par["write_tables"]}</writeDiaFragmentTable>
         <writeDiaFragmentQuantTable>{"DIA fragments quant" in par["write_tables"]}</writeDiaFragmentQuantTable>
         <writeMzTab>{"mzTab" in par["write_tables"]}</writeMzTab>
         <disableMd5>False</disableMd5>
         <cacheBinInds>True</cacheBinInds>
         <etdIncludeB>False</etdIncludeB>
         <ms2PrecursorShift>0</ms2PrecursorShift>
         <complementaryIonPpm>20</complementaryIonPpm>
         <variationParseRule></variationParseRule>
         <variationMode>none</variationMode>
         <useSeriesReporters>False</useSeriesReporters>
         <name>session1</name>
         <maxQuantVersion>2.0.3.0</maxQuantVersion>
         <pluginFolder></pluginFolder>
         <numThreads>30</numThreads>
         <emailAddress></emailAddress>
         <smtpHost></smtpHost>
         <emailFromAddress></emailFromAddress>
         <fixedCombinedFolder>{par["output"]}/</fixedCombinedFolder>
         <fullMinMz>-1.79769313486232E+308</fullMinMz>
         <fullMaxMz>1.79769313486232E+308</fullMaxMz>
         <sendEmail>False</sendEmail>
         <ionCountIntensities>False</ionCountIntensities>
         <verboseColumnHeaders>False</verboseColumnHeaders>
         <calcPeakProperties>True</calcPeakProperties>
         <showCentroidMassDifferences>False</showCentroidMassDifferences>
         <showIsotopeMassDifferences>False</showIsotopeMassDifferences>
         <useDotNetCore>True</useDotNetCore>
         <profilePerformance>False</profilePerformance>
         <filePaths>{''.join([ f"{endl}      <string>{file}</string>" for file in par["input"] ])}
         </filePaths>
         <experiments>{''.join([ f"{endl}      <string>{exp}</string>" for exp in experiment_names ])}
         </experiments>
         <fractions>{''.join([ f"{endl}      <short>32767</short>" for file in par["input"] ])}
         </fractions>
         <ptms>{''.join([ f"{endl}      <boolean>False</boolean>" for file in par["input"] ])}
         </ptms>
         <paramGroupIndices>{''.join([ f"{endl}      <int>0</int>" for file in par["input"] ])}
         </paramGroupIndices>
         <referenceChannel>{''.join([ f"{endl}      <string></string>" for file in par["input"] ])}
         </referenceChannel>
         <intensPred>False</intensPred>
         <intensPredModelReTrain>False</intensPredModelReTrain>
         <lfqTopNPeptides>0</lfqTopNPeptides>
         <diaJoinPrecChargesForLfq>False</diaJoinPrecChargesForLfq>
         <diaFragChargesForQuant>1</diaFragChargesForQuant>
         <timsRearrangeSpectra>False</timsRearrangeSpectra>
         <gridSpacing>0.5</gridSpacing>
         <proteinGroupingFile></proteinGroupingFile>
         <parameterGroups>
            <parameterGroup>
               <msInstrument>{ms_instrument_settings.at[par["ms_instrument"], "msInstrument"]}</msInstrument>
               <maxCharge>{ms_instrument_settings.at[par["ms_instrument"], "maxCharge"]}</maxCharge>
               <minPeakLen>{ms_instrument_settings.at[par["ms_instrument"], "minPeakLen"]}</minPeakLen>
               <diaMinPeakLen>{ms_instrument_settings.at[par["ms_instrument"], "diaMinPeakLen"]}</diaMinPeakLen>
               <useMs1Centroids>{ms_instrument_settings.at[par["ms_instrument"], "useMs1Centroids"]}</useMs1Centroids>
               <useMs2Centroids>{ms_instrument_settings.at[par["ms_instrument"], "useMs2Centroids"]}</useMs2Centroids>
               <cutPeaks>True</cutPeaks>
               <gapScans>1</gapScans>
               <minTime>NaN</minTime>
               <maxTime>NaN</maxTime>
               <matchType>MatchFromAndTo</matchType>
               <intensityDetermination>{ms_instrument_settings.at[par["ms_instrument"], "intensityDetermination"]}</intensityDetermination>
               <centroidMatchTol>{ms_instrument_settings.at[par["ms_instrument"], "centroidMatchTol"]}</centroidMatchTol>
               <centroidMatchTolInPpm>True</centroidMatchTolInPpm>
               <centroidHalfWidth>35</centroidHalfWidth>
               <centroidHalfWidthInPpm>True</centroidHalfWidthInPpm>
               <valleyFactor>{ms_instrument_settings.at[par["ms_instrument"], "valleyFactor"]}</valleyFactor>
               <isotopeValleyFactor>1.2</isotopeValleyFactor>
               <advancedPeakSplitting>{ms_instrument_settings.at[par["ms_instrument"], "advancedPeakSplitting"]}</advancedPeakSplitting>
               <intensityThresholdMs1>{ms_instrument_settings.at[par["ms_instrument"], "intensityThresholdMs1"]}</intensityThresholdMs1>
               <intensityThresholdMs2>{ms_instrument_settings.at[par["ms_instrument"], "intensityThresholdMs2"]}</intensityThresholdMs2>
               <labelMods>
                  <string></string>
               </labelMods>
               <lcmsRunType>{par["lcms_run_type"]}</lcmsRunType>
               <reQuantify>False</reQuantify>
               <lfqMode>{"1" if par["lfq_mode"] == "LFQ" else "0"}</lfqMode>
               <lfqNormClusterSize>80</lfqNormClusterSize>
               <lfqMinEdgesPerNode>3</lfqMinEdgesPerNode>
               <lfqAvEdgesPerNode>6</lfqAvEdgesPerNode>
               <lfqMaxFeatures>100000</lfqMaxFeatures>
               <neucodeMaxPpm>{group_type_settings.at[par["lcms_run_type"], "neucodeMaxPpm"]}</neucodeMaxPpm>
               <neucodeResolution>{group_type_settings.at[par["lcms_run_type"], "neucodeResolution"]}</neucodeResolution>
               <neucodeResolutionInMda>{group_type_settings.at[par["lcms_run_type"], "neucodeResolutionInMda"]}</neucodeResolutionInMda>
               <neucodeInSilicoLowRes>{group_type_settings.at[par["lcms_run_type"], "neucodeInSilicoLowRes"]}</neucodeInSilicoLowRes>
               <fastLfq>True</fastLfq>
               <lfqRestrictFeatures>False</lfqRestrictFeatures>
               <lfqMinRatioCount>2</lfqMinRatioCount>
               <maxLabeledAa>{group_type_settings.at[par["lcms_run_type"], "maxLabeledAa"]}</maxLabeledAa>
               <maxNmods>5</maxNmods>
               <maxMissedCleavages>2</maxMissedCleavages>
               <multiplicity>1</multiplicity>
               <enzymeMode>0</enzymeMode>
               <complementaryReporterType>0</complementaryReporterType>
               <reporterNormalization>0</reporterNormalization>
               <neucodeIntensityMode>0</neucodeIntensityMode>
               <fixedModifications>
                  <string>Carbamidomethyl (C)</string>
               </fixedModifications>
               <enzymes>
                  <string>Trypsin/P</string>
               </enzymes>
               <enzymesFirstSearch>
               </enzymesFirstSearch>
               <enzymeModeFirstSearch>0</enzymeModeFirstSearch>
               <useEnzymeFirstSearch>False</useEnzymeFirstSearch>
               <useVariableModificationsFirstSearch>False</useVariableModificationsFirstSearch>
               <variableModifications>
                  <string>Oxidation (M)</string>
                  <string>Acetyl (Protein N-term)</string>
               </variableModifications>
               <useMultiModification>False</useMultiModification>
               <multiModifications>
               </multiModifications>
               <isobaricLabels>
               </isobaricLabels>
               <neucodeLabels>
               </neucodeLabels>
               <variableModificationsFirstSearch>
               </variableModificationsFirstSearch>
               <hasAdditionalVariableModifications>False</hasAdditionalVariableModifications>
               <additionalVariableModifications>
               </additionalVariableModifications>
               <additionalVariableModificationProteins>
               </additionalVariableModificationProteins>
               <doMassFiltering>True</doMassFiltering>
               <firstSearchTol>20</firstSearchTol>
               <mainSearchTol>{ms_instrument_settings.at[par["ms_instrument"], "mainSearchTol"]}</mainSearchTol>
               <searchTolInPpm>True</searchTolInPpm>
               <isotopeMatchTol>{ms_instrument_settings.at[par["ms_instrument"], "isotopeMatchTol"]}</isotopeMatchTol>
               <isotopeMatchTolInPpm>{ms_instrument_settings.at[par["ms_instrument"], "isotopeMatchTolInPpm"]}</isotopeMatchTolInPpm>
               <isotopeTimeCorrelation>0.6</isotopeTimeCorrelation>
               <theorIsotopeCorrelation>0.6</theorIsotopeCorrelation>
               <checkMassDeficit>{ms_instrument_settings.at[par["ms_instrument"], "checkMassDeficit"]}</checkMassDeficit>
               <recalibrationInPpm>True</recalibrationInPpm>
               <intensityDependentCalibration>{ms_instrument_settings.at[par["ms_instrument"], "intensityDependentCalibration"]}</intensityDependentCalibration>
               <minScoreForCalibration>{ms_instrument_settings.at[par["ms_instrument"], "minScoreForCalibration"]}</minScoreForCalibration>
               <matchLibraryFile>False</matchLibraryFile>
               <libraryFile></libraryFile>
               <matchLibraryMassTolPpm>0</matchLibraryMassTolPpm>
               <matchLibraryTimeTolMin>0</matchLibraryTimeTolMin>
               <matchLabelTimeTolMin>0</matchLabelTimeTolMin>
               <reporterMassTolerance>NaN</reporterMassTolerance>
               <reporterPif>{group_type_settings.at[par["lcms_run_type"], "reporterPif"]}</reporterPif>
               <filterPif>False</filterPif>
               <reporterFraction>{group_type_settings.at[par["lcms_run_type"], "reporterFraction"]}</reporterFraction>
               <reporterBasePeakRatio>{group_type_settings.at[par["lcms_run_type"], "reporterBasePeakRatio"]}</reporterBasePeakRatio>
               <timsHalfWidth>{group_type_settings.at[par["lcms_run_type"], "timsHalfWidth"]}</timsHalfWidth>
               <timsStep>{group_type_settings.at[par["lcms_run_type"], "timsStep"]}</timsStep>
               <timsResolution>{group_type_settings.at[par["lcms_run_type"], "timsResolution"]}</timsResolution>
               <timsMinMsmsIntensity>{group_type_settings.at[par["lcms_run_type"], "timsMinMsmsIntensity"]}</timsMinMsmsIntensity>
               <timsRemovePrecursor>True</timsRemovePrecursor>
               <timsIsobaricLabels>False</timsIsobaricLabels>
               <timsCollapseMsms>True</timsCollapseMsms>
               <crossLinkingType>0</crossLinkingType>
               <crossLinker></crossLinker>
               <minMatchXl>3</minMatchXl>
               <minPairedPepLenXl>6</minPairedPepLenXl>
               <minScore_Dipeptide>40</minScore_Dipeptide>
               <minScore_Monopeptide>0</minScore_Monopeptide>
               <minScore_PartialCross>10</minScore_PartialCross>
               <crosslinkOnlyIntraProtein>False</crosslinkOnlyIntraProtein>
               <crosslinkIntensityBasedPrecursor>True</crosslinkIntensityBasedPrecursor>
               <isHybridPrecDetermination>False</isHybridPrecDetermination>
               <topXcross>3</topXcross>
               <doesSeparateInterIntraProteinCross>False</doesSeparateInterIntraProteinCross>
               <crosslinkMaxMonoUnsaturated>0</crosslinkMaxMonoUnsaturated>
               <crosslinkMaxMonoSaturated>0</crosslinkMaxMonoSaturated>
               <crosslinkMaxDiUnsaturated>0</crosslinkMaxDiUnsaturated>
               <crosslinkMaxDiSaturated>0</crosslinkMaxDiSaturated>
               <crosslinkModifications>
               </crosslinkModifications>
               <crosslinkFastaFiles>
               </crosslinkFastaFiles>
               <crosslinkSites>
               </crosslinkSites>
               <crosslinkNetworkFiles>
               </crosslinkNetworkFiles>
               <crosslinkMode></crosslinkMode>
               <peakRefinement>False</peakRefinement>
               <isobaricSumOverWindow>True</isobaricSumOverWindow>
               <isobaricWeightExponent>0.75</isobaricWeightExponent>
               <collapseMsmsOnIsotopePatterns>False</collapseMsmsOnIsotopePatterns>
               <diaLibraryType>0</diaLibraryType>
               <diaLibraryPaths>
               </diaLibraryPaths>
               <diaPeptidePaths>
               </diaPeptidePaths>
               <diaEvidencePaths>
               </diaEvidencePaths>
               <diaMsmsPaths>
               </diaMsmsPaths>
               <diaInitialPrecMassTolPpm>20</diaInitialPrecMassTolPpm>
               <diaInitialFragMassTolPpm>20</diaInitialFragMassTolPpm>
               <diaCorrThresholdFeatureClustering>0.85</diaCorrThresholdFeatureClustering>
               <diaPrecTolPpmFeatureClustering>2</diaPrecTolPpmFeatureClustering>
               <diaFragTolPpmFeatureClustering>2</diaFragTolPpmFeatureClustering>
               <diaScoreN>7</diaScoreN>
               <diaMinScore>1.99</diaMinScore>
               <diaXgBoostBaseScore>0.4</diaXgBoostBaseScore>
               <diaXgBoostSubSample>0.9</diaXgBoostSubSample>
               <centroidPosition>0</centroidPosition>
               <diaQuantMethod>7</diaQuantMethod>
               <diaFeatureQuantMethod>2</diaFeatureQuantMethod>
               <lfqNormType>1</lfqNormType>
               <diaTopNForQuant>{ms_instrument_settings.at[par["ms_instrument"], "diaTopNForQuant"]}</diaTopNForQuant>
               <diaMinMsmsIntensityForQuant>0</diaMinMsmsIntensityForQuant>
               <diaTopMsmsIntensityQuantileForQuant>0.85</diaTopMsmsIntensityQuantileForQuant>
               <diaPrecursorFilterType>0</diaPrecursorFilterType>
               <diaMinFragmentOverlapScore>1</diaMinFragmentOverlapScore>
               <diaMinPrecursorScore>0.5</diaMinPrecursorScore>
               <diaMinProfileCorrelation>0</diaMinProfileCorrelation>
               <diaXgBoostMinChildWeight>9</diaXgBoostMinChildWeight>
               <diaXgBoostMaximumTreeDepth>12</diaXgBoostMaximumTreeDepth>
               <diaXgBoostEstimators>580</diaXgBoostEstimators>
               <diaXgBoostGamma>0.9</diaXgBoostGamma>
               <diaXgBoostMaxDeltaStep>3</diaXgBoostMaxDeltaStep>
               <diaGlobalMl>True</diaGlobalMl>
               <diaAdaptiveMassAccuracy>False</diaAdaptiveMassAccuracy>
               <diaMassWindowFactor>3.3</diaMassWindowFactor>
               <diaRtPrediction>False</diaRtPrediction>
               <diaRtPredictionSecondRound>False</diaRtPredictionSecondRound>
               <diaNoMl>False</diaNoMl>
               <diaPermuteRt>False</diaPermuteRt>
               <diaPermuteCcs>False</diaPermuteCcs>
               <diaBackgroundSubtraction>{ms_instrument_settings.at[par["ms_instrument"], "diaBackgroundSubtraction"]}</diaBackgroundSubtraction>
               <diaBackgroundSubtractionQuantile>{ms_instrument_settings.at[par["ms_instrument"], "diaBackgroundSubtractionQuantile"]}</diaBackgroundSubtractionQuantile>
               <diaBackgroundSubtractionFactor>4</diaBackgroundSubtractionFactor>
               <diaLfqWeightedMedian>{ms_instrument_settings.at[par["ms_instrument"], "diaLfqWeightedMedian"]}</diaLfqWeightedMedian>
               <diaTransferQvalue>0.3</diaTransferQvalue>
               <diaOnlyIsosForRecal>True</diaOnlyIsosForRecal>
               <diaMinPeaksForRecal>5</diaMinPeaksForRecal>
               <diaUseFragIntensForMl>False</diaUseFragIntensForMl>
               <diaUseFragMassesForMl>False</diaUseFragMassesForMl>
               <diaMaxTrainInstances>1000000</diaMaxTrainInstances>
            </parameterGroup>
         </parameterGroups>
         <msmsParamsArray>
            <msmsParams>
               <Name>FTMS</Name>
               <MatchTolerance>20</MatchTolerance>
               <MatchToleranceInPpm>True</MatchToleranceInPpm>
               <DeisotopeTolerance>7</DeisotopeTolerance>
               <DeisotopeToleranceInPpm>True</DeisotopeToleranceInPpm>
               <DeNovoTolerance>25</DeNovoTolerance>
               <DeNovoToleranceInPpm>True</DeNovoToleranceInPpm>
               <Deisotope>True</Deisotope>
               <Topx>12</Topx>
               <TopxInterval>100</TopxInterval>
               <HigherCharges>True</HigherCharges>
               <IncludeWater>True</IncludeWater>
               <IncludeAmmonia>True</IncludeAmmonia>
               <DependentLosses>True</DependentLosses>
               <Recalibration>False</Recalibration>
            </msmsParams>
            <msmsParams>
               <Name>ITMS</Name>
               <MatchTolerance>0.5</MatchTolerance>
               <MatchToleranceInPpm>False</MatchToleranceInPpm>
               <DeisotopeTolerance>0.15</DeisotopeTolerance>
               <DeisotopeToleranceInPpm>False</DeisotopeToleranceInPpm>
               <DeNovoTolerance>0.5</DeNovoTolerance>
               <DeNovoToleranceInPpm>False</DeNovoToleranceInPpm>
               <Deisotope>False</Deisotope>
               <Topx>8</Topx>
               <TopxInterval>100</TopxInterval>
               <HigherCharges>True</HigherCharges>
               <IncludeWater>True</IncludeWater>
               <IncludeAmmonia>True</IncludeAmmonia>
               <DependentLosses>True</DependentLosses>
               <Recalibration>False</Recalibration>
            </msmsParams>
            <msmsParams>
               <Name>TOF</Name>
               <MatchTolerance>40</MatchTolerance>
               <MatchToleranceInPpm>True</MatchToleranceInPpm>
               <DeisotopeTolerance>0.01</DeisotopeTolerance>
               <DeisotopeToleranceInPpm>False</DeisotopeToleranceInPpm>
               <DeNovoTolerance>25</DeNovoTolerance>
               <DeNovoToleranceInPpm>True</DeNovoToleranceInPpm>
               <Deisotope>True</Deisotope>
               <Topx>10</Topx>
               <TopxInterval>100</TopxInterval>
               <HigherCharges>True</HigherCharges>
               <IncludeWater>True</IncludeWater>
               <IncludeAmmonia>True</IncludeAmmonia>
               <DependentLosses>True</DependentLosses>
               <Recalibration>False</Recalibration>
            </msmsParams>
            <msmsParams>
               <Name>Unknown</Name>
               <MatchTolerance>20</MatchTolerance>
               <MatchToleranceInPpm>True</MatchToleranceInPpm>
               <DeisotopeTolerance>7</DeisotopeTolerance>
               <DeisotopeToleranceInPpm>True</DeisotopeToleranceInPpm>
               <DeNovoTolerance>25</DeNovoTolerance>
               <DeNovoToleranceInPpm>True</DeNovoToleranceInPpm>
               <Deisotope>True</Deisotope>
               <Topx>12</Topx>
               <TopxInterval>100</TopxInterval>
               <HigherCharges>True</HigherCharges>
               <IncludeWater>True</IncludeWater>
               <IncludeAmmonia>True</IncludeAmmonia>
               <DependentLosses>True</DependentLosses>
               <Recalibration>False</Recalibration>
            </msmsParams>
         </msmsParamsArray>
         <fragmentationParamsArray>
            <fragmentationParams>
               <Name>CID</Name>
               <Connected>False</Connected>
               <ConnectedScore0>1</ConnectedScore0>
               <ConnectedScore1>1</ConnectedScore1>
               <ConnectedScore2>1</ConnectedScore2>
               <InternalFragments>False</InternalFragments>
               <InternalFragmentWeight>1</InternalFragmentWeight>
               <InternalFragmentAas>KRH</InternalFragmentAas>
            </fragmentationParams>
            <fragmentationParams>
               <Name>HCD</Name>
               <Connected>False</Connected>
               <ConnectedScore0>1</ConnectedScore0>
               <ConnectedScore1>1</ConnectedScore1>
               <ConnectedScore2>1</ConnectedScore2>
               <InternalFragments>False</InternalFragments>
               <InternalFragmentWeight>1</InternalFragmentWeight>
               <InternalFragmentAas>KRH</InternalFragmentAas>
            </fragmentationParams>
            <fragmentationParams>
               <Name>ETD</Name>
               <Connected>False</Connected>
               <ConnectedScore0>1</ConnectedScore0>
               <ConnectedScore1>1</ConnectedScore1>
               <ConnectedScore2>1</ConnectedScore2>
               <InternalFragments>False</InternalFragments>
               <InternalFragmentWeight>1</InternalFragmentWeight>
               <InternalFragmentAas>KRH</InternalFragmentAas>
            </fragmentationParams>
            <fragmentationParams>
               <Name>PQD</Name>
               <Connected>False</Connected>
               <ConnectedScore0>1</ConnectedScore0>
               <ConnectedScore1>1</ConnectedScore1>
               <ConnectedScore2>1</ConnectedScore2>
               <InternalFragments>False</InternalFragments>
               <InternalFragmentWeight>1</InternalFragmentWeight>
               <InternalFragmentAas>KRH</InternalFragmentAas>
            </fragmentationParams>
            <fragmentationParams>
               <Name>ETHCD</Name>
               <Connected>False</Connected>
               <ConnectedScore0>1</ConnectedScore0>
               <ConnectedScore1>1</ConnectedScore1>
               <ConnectedScore2>1</ConnectedScore2>
               <InternalFragments>False</InternalFragments>
               <InternalFragmentWeight>1</InternalFragmentWeight>
               <InternalFragmentAas>KRH</InternalFragmentAas>
            </fragmentationParams>
            <fragmentationParams>
               <Name>ETCID</Name>
               <Connected>False</Connected>
               <ConnectedScore0>1</ConnectedScore0>
               <ConnectedScore1>1</ConnectedScore1>
               <ConnectedScore2>1</ConnectedScore2>
               <InternalFragments>False</InternalFragments>
               <InternalFragmentWeight>1</InternalFragmentWeight>
               <InternalFragmentAas>KRH</InternalFragmentAas>
            </fragmentationParams>
            <fragmentationParams>
               <Name>UVPD</Name>
               <Connected>False</Connected>
               <ConnectedScore0>1</ConnectedScore0>
               <ConnectedScore1>1</ConnectedScore1>
               <ConnectedScore2>1</ConnectedScore2>
               <InternalFragments>False</InternalFragments>
               <InternalFragmentWeight>1</InternalFragmentWeight>
               <InternalFragmentAas>KRH</InternalFragmentAas>
            </fragmentationParams>
            <fragmentationParams>
               <Name>Unknown</Name>
               <Connected>False</Connected>
               <ConnectedScore0>1</ConnectedScore0>
               <ConnectedScore1>1</ConnectedScore1>
               <ConnectedScore2>1</ConnectedScore2>
               <InternalFragments>False</InternalFragments>
               <InternalFragmentWeight>1</InternalFragmentWeight>
               <InternalFragmentAas>KRH</InternalFragmentAas>
            </fragmentationParams>
         </fragmentationParamsArray>
      </MaxQuantParams>
      """
      
         with open(param_file, "w") as f:
            f.write(param_content)
      
         if not par["dryrun"]:
            # copy input files
            for old, new in zip(old_inputs, new_inputs):
               if (os.path.isdir(old)):
                  shutil.copytree(old, new)
               else:
                  shutil.copyfile(old, new)
               
            
            # run maxquant
            p = subprocess.Popen(
               ["dotnet", "/maxquant/bin/MaxQuantCmd.exe", os.path.basename(param_file)], 
               # ["maxquant", os.path.basename(param_file)], 
               cwd=os.path.dirname(param_file)
            )
            p.wait()
      
            if p.returncode != 0:
               raise Exception(f"MaxQuant finished with exit code {p.returncode}") 
      
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "maxquant"
    is_executable: true
  - type: "file"
    path: "settings"
  description: "Perform a MaxQuant analysis with mostly default parameters."
  usage: "maxquant --input file1.raw --input file2.raw --reference ref.fasta --output\
    \ out/"
  test_resources: []
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  enabled: true
platform:
  type: "docker"
  id: "docker"
  image: "python:3.10"
  target_organization: "czbiohub/mspipelines"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  run_args: []
  target_image_source: "https://github.com/czbiohub/mspipelines"
  setup:
  - type: "apt"
    packages:
    - "wget"
    - "unzip"
    - "apt-transport-https"
    interactive: false
  - type: "docker"
    resources: []
    label: []
    add: []
    copy: []
    run:
    - "wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb\
      \ -O packages-microsoft-prod.deb && dpkg -i packages-microsoft-prod.deb && rm\
      \ packages-microsoft-prod.deb"
    build_args: []
    env: []
  - type: "apt"
    packages:
    - "dotnet-sdk-2.1"
    - "aspnetcore-runtime-2.1"
    - "dotnet-sdk-3.1"
    - "aspnetcore-runtime-3.1"
    interactive: false
  - type: "docker"
    resources: []
    label: []
    add: []
    copy: []
    run:
    - "mkdir /maxquant && cd /maxquant && wget -q https://www.dropbox.com/s/6aijsx0v3zvkfqu/MaxQuant_2.0.3.1.zip\
      \ -O MaxQuant_2.0.3.1.zip && unzip MaxQuant_2.0.3.1.zip && rm MaxQuant_2.0.3.1.zip\
      \ && cd $(find /maxquant/* -type d -maxdepth 1) && mv * /maxquant"
    build_args: []
    env: []
  - type: "python"
    user: false
    packages: []
    pip: []
    pypi:
    - "pandas"
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
  test_setup: []
platforms: []
info:
  config: "src/maxquant/maxquant/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/maxquant/maxquant"
  executable: "target/docker/maxquant/maxquant/maxquant"
  viash_version: "0.5.14"
  git_commit: "a68b3868305a8730cd026f01c44a914c2994f493"
  git_remote: "https://github.com/czbiohub/mspipelines"
