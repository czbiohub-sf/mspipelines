#!/usr/bin/env bash

# maxquant main_build
# 
# This wrapper script is auto-generated by viash 0.6.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid:
# 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="maxquant"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "maxquant main_build"
  echo ""
  echo "Perform a MaxQuant analysis with mostly default parameters."
  echo ""
  echo "Usage:"
  echo "maxquant --input file1.raw --input file2.raw --reference ref.fasta --output out/"
  echo ""
  echo "Inputs:"
  echo "    --input"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: input.raw"
  echo "        One or more Thermo Raw files."
  echo ""
  echo "    --reference"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: reference.fasta"
  echo "        A reference file in fasta format."
  echo ""
  echo "Outputs:"
  echo "    --output"
  echo "        type: file, required parameter, output"
  echo "        example: output_dir"
  echo "        An output directory to store the 'mqpar.xml' and 'combined' outputs."
  echo ""
  echo "Arguments:"
  echo "    --ref_taxonomy_id"
  echo "        type: string, multiple values allowed"
  echo "        example: 9606"
  echo "        Taxonomy ID. Length must match --reference parameter."
  echo "        Common taxonomy IDs are Homo Sapiens: 9606, Mus Musculus: 10090."
  echo ""
  echo "    --match_between_runs"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Identifications are transferred to non-sequenced or non-identified MS"
  echo "        features in other LC-MS runs."
  echo ""
  echo "    --quantMode"
  echo "        type: integer"
  echo "        example: 1"
  echo "        Apply the selected quantification mode"
  echo ""
  echo "    --mainSearchMaxCombinations"
  echo "        type: integer"
  echo "        example: 200"
  echo ""
  echo "    --write_tables"
  echo "        type: string, multiple values allowed"
  echo "        default: msScans:msmsScans:ms3Scans:allPeptides:mzRange:mzTab:DIA"
  echo "fragments:DIA fragments quant:pasefMsmsScans:accumulatedMsmsScans"
  echo "        choices: [ msScans, msmsScans, ms3Scans, allPeptides, mzRange, mzTab,"
  echo "DIA fragments, DIA fragments quant, pasefMsmsScans, accumulatedMsmsScans ]"
  echo "        Which tables to write out."
  echo ""
  echo "    --ms_instrument"
  echo "        type: string"
  echo "        default: Bruker TIMS"
  echo "        choices: [ Orbitrap, Bruker Q-TOF, Sciex Q-TOF, Agilent Q-TOF, Bruker"
  echo "TIMS ]"
  echo "        Type of intrument the data was generated on. Some internal parameters,"
  echo "        e.g. in peak detection are set to optimal values based on the machine"
  echo "        type. Currently Thermo Fisher Orbitrap and FT like instruments are"
  echo "        supported, as well as ToF instruments like Bruker Impact HD and AB Sciex"
  echo "        TripleTOF 5600. Usually there is no need for the user to adjust the"
  echo "        sub-parameters."
  echo ""
  echo "    --lcms_run_type"
  echo "        type: string"
  echo "        default: Standard"
  echo "        choices: [ Standard, Reporter ion MS2, Reporter ion MS3, NeuCode,"
  echo "BoxCar, TIMS-DDA, MaxDIA, TIMS MaxDIA, BoxCar MaxDIA ]"
  echo "        The type of LC-MS run. Select 'Standard' for label free and MS1 labeled"
  echo "        samples. For conventional isobaric labeling samples, select 'Reporter"
  echo "        ion MS2'. In case the isobaric labeling reporters should be read from"
  echo "        MS3 spectra, please select 'Reporter ion MS3'."
  echo ""
  echo "    --lfq_mode"
  echo "        type: string"
  echo "        default: LFQ"
  echo "        choices: [ None, LFQ ]"
  echo "        Apply the algorithm for label free protein quantification. The use of an"
  echo "        experimental design so specify which LC-MS runs or groups of LC-MS runs"
  echo "        correspond to the different samples is obligatory here. The output of"
  echo "        the label free algorithm can be found in the proteinGroups table in the"
  echo "        columns starting with 'LFQ Intensity'."
  echo ""
  echo "    --dryrun"
  echo "        type: boolean_true"
  echo "        If true, will only generate the mqpar.xml file and not run MaxQuant."
  echo ""
  echo "    --id_parse_rule"
  echo "        type: string, multiple values allowed"
  echo "        The parsing rule for Faste entries in the provided sequence databases"
}
######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM python:3.10

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y wget unzip apt-transport-https && \
  rm -rf /var/lib/apt/lists/*

RUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y dotnet-sdk-2.1 aspnetcore-runtime-2.1 dotnet-sdk-3.1 aspnetcore-runtime-3.1 && \
  rm -rf /var/lib/apt/lists/*

RUN mkdir /maxquant && cd /maxquant && wget -q https://www.dropbox.com/s/6aijsx0v3zvkfqu/MaxQuant_2.0.3.1.zip -O MaxQuant_2.0.3.1.zip && unzip MaxQuant_2.0.3.1.zip && rm MaxQuant_2.0.3.1.zip && cd $(find /maxquant/* -type d -maxdepth 1) && mv * /maxquant
RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "pandas"

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "jinja-cli"

LABEL org.opencontainers.image.authors="Robrecht Cannoodt"
LABEL org.opencontainers.image.description="Companion container for running component maxquant maxquant"
LABEL org.opencontainers.image.created="2022-11-28T11:08:28Z"
LABEL org.opencontainers.image.source="https://github.com/czbiohub/mspipelines"
LABEL org.opencontainers.image.revision="d8af3f0b1e2663216205ca0e43aa8e39f3b1679a"
LABEL org.opencontainers.image.version="main_build"
VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-maxquant-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'bash'
}
# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "$mount_target/$base_name"
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "-v \"$mount_source:$mount_target\""
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=''

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "maxquant main_build"
            exit
            ;;
        --input)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --reference)
            if [ -z "$VIASH_PAR_REFERENCE" ]; then
              VIASH_PAR_REFERENCE="$2"
            else
              VIASH_PAR_REFERENCE="$VIASH_PAR_REFERENCE;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference=*)
            if [ -z "$VIASH_PAR_REFERENCE" ]; then
              VIASH_PAR_REFERENCE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_REFERENCE="$VIASH_PAR_REFERENCE;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --ref_taxonomy_id)
            if [ -z "$VIASH_PAR_REF_TAXONOMY_ID" ]; then
              VIASH_PAR_REF_TAXONOMY_ID="$2"
            else
              VIASH_PAR_REF_TAXONOMY_ID="$VIASH_PAR_REF_TAXONOMY_ID:""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --ref_taxonomy_id. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --ref_taxonomy_id=*)
            if [ -z "$VIASH_PAR_REF_TAXONOMY_ID" ]; then
              VIASH_PAR_REF_TAXONOMY_ID=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_REF_TAXONOMY_ID="$VIASH_PAR_REF_TAXONOMY_ID:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --match_between_runs)
            [ -n "$VIASH_PAR_MATCH_BETWEEN_RUNS" ] && ViashError Bad arguments for option \'--match_between_runs\': \'$VIASH_PAR_MATCH_BETWEEN_RUNS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MATCH_BETWEEN_RUNS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --match_between_runs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --match_between_runs=*)
            [ -n "$VIASH_PAR_MATCH_BETWEEN_RUNS" ] && ViashError Bad arguments for option \'--match_between_runs=*\': \'$VIASH_PAR_MATCH_BETWEEN_RUNS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MATCH_BETWEEN_RUNS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --quantMode)
            [ -n "$VIASH_PAR_QUANTMODE" ] && ViashError Bad arguments for option \'--quantMode\': \'$VIASH_PAR_QUANTMODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUANTMODE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --quantMode. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --quantMode=*)
            [ -n "$VIASH_PAR_QUANTMODE" ] && ViashError Bad arguments for option \'--quantMode=*\': \'$VIASH_PAR_QUANTMODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUANTMODE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --mainSearchMaxCombinations)
            [ -n "$VIASH_PAR_MAINSEARCHMAXCOMBINATIONS" ] && ViashError Bad arguments for option \'--mainSearchMaxCombinations\': \'$VIASH_PAR_MAINSEARCHMAXCOMBINATIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAINSEARCHMAXCOMBINATIONS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --mainSearchMaxCombinations. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --mainSearchMaxCombinations=*)
            [ -n "$VIASH_PAR_MAINSEARCHMAXCOMBINATIONS" ] && ViashError Bad arguments for option \'--mainSearchMaxCombinations=*\': \'$VIASH_PAR_MAINSEARCHMAXCOMBINATIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAINSEARCHMAXCOMBINATIONS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --write_tables)
            if [ -z "$VIASH_PAR_WRITE_TABLES" ]; then
              VIASH_PAR_WRITE_TABLES="$2"
            else
              VIASH_PAR_WRITE_TABLES="$VIASH_PAR_WRITE_TABLES:""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --write_tables. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --write_tables=*)
            if [ -z "$VIASH_PAR_WRITE_TABLES" ]; then
              VIASH_PAR_WRITE_TABLES=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_WRITE_TABLES="$VIASH_PAR_WRITE_TABLES:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --ms_instrument)
            [ -n "$VIASH_PAR_MS_INSTRUMENT" ] && ViashError Bad arguments for option \'--ms_instrument\': \'$VIASH_PAR_MS_INSTRUMENT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MS_INSTRUMENT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --ms_instrument. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --ms_instrument=*)
            [ -n "$VIASH_PAR_MS_INSTRUMENT" ] && ViashError Bad arguments for option \'--ms_instrument=*\': \'$VIASH_PAR_MS_INSTRUMENT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MS_INSTRUMENT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --lcms_run_type)
            [ -n "$VIASH_PAR_LCMS_RUN_TYPE" ] && ViashError Bad arguments for option \'--lcms_run_type\': \'$VIASH_PAR_LCMS_RUN_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LCMS_RUN_TYPE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --lcms_run_type. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --lcms_run_type=*)
            [ -n "$VIASH_PAR_LCMS_RUN_TYPE" ] && ViashError Bad arguments for option \'--lcms_run_type=*\': \'$VIASH_PAR_LCMS_RUN_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LCMS_RUN_TYPE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --lfq_mode)
            [ -n "$VIASH_PAR_LFQ_MODE" ] && ViashError Bad arguments for option \'--lfq_mode\': \'$VIASH_PAR_LFQ_MODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LFQ_MODE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --lfq_mode. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --lfq_mode=*)
            [ -n "$VIASH_PAR_LFQ_MODE" ] && ViashError Bad arguments for option \'--lfq_mode=*\': \'$VIASH_PAR_LFQ_MODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LFQ_MODE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dryrun)
            [ -n "$VIASH_PAR_DRYRUN" ] && ViashError Bad arguments for option \'--dryrun\': \'$VIASH_PAR_DRYRUN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DRYRUN=true
            shift 1
            ;;
        --id_parse_rule)
            if [ -z "$VIASH_PAR_ID_PARSE_RULE" ]; then
              VIASH_PAR_ID_PARSE_RULE="$2"
            else
              VIASH_PAR_ID_PARSE_RULE="$VIASH_PAR_ID_PARSE_RULE;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --id_parse_rule. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --id_parse_rule=*)
            if [ -z "$VIASH_PAR_ID_PARSE_RULE" ]; then
              VIASH_PAR_ID_PARSE_RULE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_ID_PARSE_RULE="$VIASH_PAR_ID_PARSE_RULE;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck
if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build' ifneedbepullelsecachedbuild
if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build'
  exit 0
fi

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


if [[ $# -gt 0 ]]; then
  VIASH_META_FUNCTIONALITY_NAME="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_RESOURCES_DIR="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_EXECUTABLE="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_TEMP_DIR="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_CPUS="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_B="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_KB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_MB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_GB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_TB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_PB="$1"
  shift 1
fi

# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_REFERENCE+x} ]; then
  ViashError '--reference' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_MATCH_BETWEEN_RUNS+x} ]; then
  VIASH_PAR_MATCH_BETWEEN_RUNS="false"
fi
if [ -z ${VIASH_PAR_WRITE_TABLES+x} ]; then
  VIASH_PAR_WRITE_TABLES="msScans:msmsScans:ms3Scans:allPeptides:mzRange:mzTab:DIA fragments:DIA fragments quant:pasefMsmsScans:accumulatedMsmsScans"
fi
if [ -z ${VIASH_PAR_MS_INSTRUMENT+x} ]; then
  VIASH_PAR_MS_INSTRUMENT="Bruker TIMS"
fi
if [ -z ${VIASH_PAR_LCMS_RUN_TYPE+x} ]; then
  VIASH_PAR_LCMS_RUN_TYPE="Standard"
fi
if [ -z ${VIASH_PAR_LFQ_MODE+x} ]; then
  VIASH_PAR_LFQ_MODE="LFQ"
fi
if [ -z ${VIASH_PAR_DRYRUN+x} ]; then
  VIASH_PAR_DRYRUN="false"
fi


# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_MATCH_BETWEEN_RUNS" ]]; then
  if ! [[ "$VIASH_PAR_MATCH_BETWEEN_RUNS" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--match_between_runs' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_QUANTMODE" ]]; then
  if ! [[ "$VIASH_PAR_QUANTMODE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--quantMode' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_MAINSEARCHMAXCOMBINATIONS" ]]; then
  if ! [[ "$VIASH_PAR_MAINSEARCHMAXCOMBINATIONS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--mainSearchMaxCombinations' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_DRYRUN" ]]; then
  if ! [[ "$VIASH_PAR_DRYRUN" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--dryrun' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi


# check whether parameters values are of the right type







if [ ! -z "$VIASH_PAR_WRITE_TABLES" ]; then
  VIASH_PAR_WRITE_TABLES_CHOICES=("msScans:msmsScans:ms3Scans:allPeptides:mzRange:mzTab:DIA fragments:DIA fragments quant:pasefMsmsScans:accumulatedMsmsScans")
  IFS=':'
  set -f
  for val in $VIASH_PAR_WRITE_TABLES; do
    if ! [[ ":${VIASH_PAR_WRITE_TABLES_CHOICES[*]}:" =~ ":${val}:" ]]; then
      ViashError '--write_tables' specified value of \'${val}\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
      exit 1
    fi
  done
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_MS_INSTRUMENT" ]; then
  VIASH_PAR_MS_INSTRUMENT_CHOICES=("Orbitrap:Bruker Q-TOF:Sciex Q-TOF:Agilent Q-TOF:Bruker TIMS")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_MS_INSTRUMENT_CHOICES[*]}:" =~ ":$VIASH_PAR_MS_INSTRUMENT:" ]]; then
    ViashError '--ms_instrument' specified value of \'$VIASH_PAR_MS_INSTRUMENT\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_LCMS_RUN_TYPE" ]; then
  VIASH_PAR_LCMS_RUN_TYPE_CHOICES=("Standard:Reporter ion MS2:Reporter ion MS3:NeuCode:BoxCar:TIMS-DDA:MaxDIA:TIMS MaxDIA:BoxCar MaxDIA")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_LCMS_RUN_TYPE_CHOICES[*]}:" =~ ":$VIASH_PAR_LCMS_RUN_TYPE:" ]]; then
    ViashError '--lcms_run_type' specified value of \'$VIASH_PAR_LCMS_RUN_TYPE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_LFQ_MODE" ]; then
  VIASH_PAR_LFQ_MODE_CHOICES=("None:LFQ")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_LFQ_MODE_CHOICES[*]}:" =~ ":$VIASH_PAR_LFQ_MODE:" ]]; then
    ViashError '--lfq_mode' specified value of \'$VIASH_PAR_LFQ_MODE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi















# detect volumes from file arguments
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  IFS=";"
  for var in $VIASH_PAR_INPUT; do
    unset IFS
    VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
    if [ -z "$VIASH_TEST_INPUT" ]; then
      VIASH_TEST_INPUT="$(ViashAutodetectMount "$var")"
    else
      VIASH_TEST_INPUT="$VIASH_TEST_INPUT;""$(ViashAutodetectMount "$var")"
    fi
  done
  VIASH_PAR_INPUT="$VIASH_TEST_INPUT"
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ]; then
  IFS=";"
  for var in $VIASH_PAR_REFERENCE; do
    unset IFS
    VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
    if [ -z "$VIASH_TEST_REFERENCE" ]; then
      VIASH_TEST_REFERENCE="$(ViashAutodetectMount "$var")"
    else
      VIASH_TEST_REFERENCE="$VIASH_TEST_REFERENCE;""$(ViashAutodetectMount "$var")"
    fi
  done
  VIASH_PAR_REFERENCE="$VIASH_TEST_REFERENCE"
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")"
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE")"
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR")"
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi
# change file ownership
function ViashPerformChown {
  
  if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi

cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS $VIASH_EXTRA_DOCKER_ARGS ghcr.io/czbiohub/mspipelines/maxquant_maxquant:main_build
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-maxquant-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'

import os
import re
import subprocess
import tempfile
import shutil
import pandas as pd
from jinja2 import FileSystemLoader, Environment

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'reference': $( if [ ! -z ${VIASH_PAR_REFERENCE+x} ]; then echo "r'${VIASH_PAR_REFERENCE//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'ref_taxonomy_id': $( if [ ! -z ${VIASH_PAR_REF_TAXONOMY_ID+x} ]; then echo "r'${VIASH_PAR_REF_TAXONOMY_ID//\'/\'\"\'\"r\'}'.split(':')"; else echo None; fi ),
  'match_between_runs': $( if [ ! -z ${VIASH_PAR_MATCH_BETWEEN_RUNS+x} ]; then echo "r'${VIASH_PAR_MATCH_BETWEEN_RUNS//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'quantMode': $( if [ ! -z ${VIASH_PAR_QUANTMODE+x} ]; then echo "int(r'${VIASH_PAR_QUANTMODE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'mainSearchMaxCombinations': $( if [ ! -z ${VIASH_PAR_MAINSEARCHMAXCOMBINATIONS+x} ]; then echo "int(r'${VIASH_PAR_MAINSEARCHMAXCOMBINATIONS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'write_tables': $( if [ ! -z ${VIASH_PAR_WRITE_TABLES+x} ]; then echo "r'${VIASH_PAR_WRITE_TABLES//\'/\'\"\'\"r\'}'.split(':')"; else echo None; fi ),
  'ms_instrument': $( if [ ! -z ${VIASH_PAR_MS_INSTRUMENT+x} ]; then echo "r'${VIASH_PAR_MS_INSTRUMENT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'lcms_run_type': $( if [ ! -z ${VIASH_PAR_LCMS_RUN_TYPE+x} ]; then echo "r'${VIASH_PAR_LCMS_RUN_TYPE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'lfq_mode': $( if [ ! -z ${VIASH_PAR_LFQ_MODE+x} ]; then echo "r'${VIASH_PAR_LFQ_MODE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'dryrun': $( if [ ! -z ${VIASH_PAR_DRYRUN+x} ]; then echo "r'${VIASH_PAR_DRYRUN//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'id_parse_rule': $( if [ ! -z ${VIASH_PAR_ID_PARSE_RULE+x} ]; then echo "r'${VIASH_PAR_ID_PARSE_RULE//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}

## VIASH END


# if par_input is a directory, look for raw files
if len(par["input"]) == 1 and os.path.isdir(par["input"][0]):
   par["input"] = [os.path.join(dp, f) 
                   for dp, _, filenames in os.walk(par["input"])
                   for f in filenames if re.match(r'.*\\.raw', f)]

# check if the user provided parsing rules, if not use default parsing rule for standard FASTA formatting
if not par["id_parse_rule"]:
   par["id_parse_rule"] = [">.*\\\\|(.*)\\\\|" for _ in par["reference"]]

# set taxonomy id to empty string if not specified
if not par["ref_taxonomy_id"]:
   par["ref_taxonomy_id"] = ["" for _ in par["reference"]]

# # use absolute paths
# for par_key in ("input", "reference", "output"):
#    par[par_key] = [os.path.abspath(f) for f in par[par_key]]

# use absolute paths
par["input"] = [ os.path.abspath(f) for f in par["input"] ]
par["reference"] = [ os.path.abspath(f) for f in par["reference"] ]
par["output"] = os.path.abspath(par["output"])

# auto set experiment names
experiment_names = [re.sub(r"_\\d+\$", "", os.path.basename(file))
                    for file in par["input"]]

# Load parameters that which are defined in tsv files.
def load_tsv(file_path, loc_selector):
   df = pd.read_table(
            f"{meta['resources_dir']}/settings/{file_path}",
            sep="\\t",
            index_col="id",
            dtype=str,
            keep_default_na=False,
            na_values=['_']
         )
   if loc_selector:
      return df.loc[par[loc_selector]]
   return df
   

tsv_dispatcher = {
   "match_between_runs_settings": ("match_between_runs.tsv", "match_between_runs"),
   "ms_instrument_settings": ("ms_instrument.tsv", "ms_instrument"),
   "group_type_settings":  ("group_type.tsv", "lcms_run_type")
}
for var_name, (filepath, selector) in tsv_dispatcher.items():
   tsv_dispatcher[var_name] = load_tsv(filepath, selector)

# check reference metadata
assert len(par["reference"]) == len(par["ref_taxonomy_id"]), \\
       "--ref_taxonomy_id must have same length as --reference"

#check id parsing rule
assert len(par["reference"]) == len(par["id_parse_rule"]), \\
       "--id_parse_rule must have same length as --reference"

# copy input files to tempdir
with tempfile.TemporaryDirectory() as temp_dir:
   # prepare to copy input files to tempdir
   old_inputs = par["input"]
   new_inputs = [os.path.join(temp_dir, os.path.basename(f)) for f in old_inputs]
   par["input"] = new_inputs

   # create output dir if not exists
   if not os.path.exists(par["output"]):
      os.makedirs(par["output"])

   # Create params file
   param_file = os.path.join(par["output"], "mqpar.xml")
   file_loader = FileSystemLoader(f"{meta['resources_dir']}/templates/")
   environment = Environment(loader=file_loader)
   template = environment.get_template("root.xml.jinja")

   param_content = template.render(
                  input=par['input'],
                  output=par['output'],
                  fastas=zip(par['reference'],par['ref_taxonomy_id'],par["id_parse_rule"]),
                  experiments=experiment_names,
                  match_between_runs=par['match_between_runs'],
                  match_between_runs_settings=tsv_dispatcher['match_between_runs_settings'],
                  ms_instrument_settings=tsv_dispatcher['ms_instrument_settings'],
                  group_type_settings=tsv_dispatcher['group_type_settings'],
                  quantMode=par['quantMode'],
                  mainSearchMaxCombinations=par['mainSearchMaxCombinations'])

   # Strip empty lines from the file 
   # No proper jinja-solution for the very first line of the file
   param_content = os.linesep.join([s for s in param_content.splitlines() if s])


   with open(param_file, "w") as f:
      f.write(param_content)

   if not par["dryrun"]:
      # copy input files
      for old, new in zip(old_inputs, new_inputs):
         if (os.path.isdir(old)):
            shutil.copytree(old, new)
         else:
            shutil.copyfile(old, new)
         
      try:
         # run maxquant
         p = subprocess.check_call(
            ["dotnet", "/maxquant/bin/MaxQuantCmd.exe", os.path.basename(param_file)], 
            cwd=os.path.dirname(param_file)
         )
      except subprocess.CalledProcessError as e:
         raise RuntimeError(f"MaxQuant finished with exit code {e.returncode}") from e

VIASHMAIN
python "\$tempscript" &
wait "\$!"

VIASHEOF
